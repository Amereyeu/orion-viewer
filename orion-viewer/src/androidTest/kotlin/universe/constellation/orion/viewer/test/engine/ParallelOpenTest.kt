package universe.constellation.orion.viewer.test.engine

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.joinAll
import kotlinx.coroutines.runBlocking
import org.junit.Assert.assertEquals
import org.junit.Test
import universe.constellation.orion.viewer.formats.FileFormats
import universe.constellation.orion.viewer.log
import universe.constellation.orion.viewer.test.framework.BaseTest
import universe.constellation.orion.viewer.test.framework.BookFile

class ParallelOpenTest : BaseTest() {

    @Test
    fun parallelPdf() {
        parallel(FileFormats.PDF.extensions.first())
    }

    @Test
    fun parallelDjvu() {
        parallel(FileFormats.DJVU.extensions.first())
    }

    fun parallel(format: String) {
        val books = BookFile.testEntriesWithCustoms().filter {
            it.simpleFileName.endsWith(format)
        }
        val pages = books.map {
            val book = it.openBook()
            try {
                val pageCount = book.pageCount
                it to pageCount
            } finally {
                book.destroy()
            }
        }.toMap()

        val pPages = runBlocking(Dispatchers.Default) {
            val tasks = books.map {
                async {
                    log("Opening document $it")
                    val book = it.openBook()
                    try {
                        val pageCount = book.pageCount
                        it to pageCount
                    } finally {
                        log("Destroying document $it")
                        book.destroy()
                    }
                }
            }
            tasks.awaitAll().toMap()
        }

        assertEquals(pages, pPages)
    }
}